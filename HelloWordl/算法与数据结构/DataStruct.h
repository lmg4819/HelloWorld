//
//  DataStruct.h
//  MainProject
//
//  Created by lmg on 2019/4/24.
//  Copyright © 2019 lmg. All rights reserved.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface DataStruct : NSObject
/*
 集合结构：元素之间没有关系
 线性结构：一对一
 树形结构：一对多
 图形结构：多对多

 
 线性存储：顺序存储结构和链式存储结构
 
 数组和链表区别：
 数组在内存空间上是连续存放的，可以通过下标查找元素，删除或者插入操作需n要移动大量元素，比较适用于元素很少变化的情况，查找时间复杂度O（1），删除插入O（n）
 链表中的元素在内存中不是顺序存储的，查找慢，但是删除和插入只需对元素指针重新赋值，效率高，查找时间复杂度O（n），删除插入O（1）
 
 */

/*
 插入排序，
 选择排序，
 冒泡排序
 快速排序
 堆排序
 
 二分查找
 */

/*
 树：是n个结点的有限集
 度：结点拥有的子树数目
 深度：树中结点的最大层次数称为树的深度或高度
 二叉树：每个结点最多有两个子树的树结构
 满二叉树：在一颗二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树被称为满二叉树
 完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i（1<=i<=n）的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这颗二叉树被称为完全二叉树。
 
 
 
 
 
 
 二叉树特点：
 1.每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点
 2.左子树和右子树是有顺序的，次序不能任意颠倒
 3.即使树中某结点只有一颗子树，也要区分它是左子树还是右子树
 
 二叉树性质：
 1.在二叉树的第i层上最多有2^(i-1)个节点（i>=1）
 2.二叉树如果深度为k，那么最多有2^k-1个节点（k>=1）
 
 满二叉树特点：
 1.叶子只出现在最下一层，出现在其他层就不可能达成平衡
 2.非叶子结点的度一定为2
 3.在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。
 
 
 完全二叉树特点：
 1.叶子结点只能出现在最下层或者次下层
 2.最下层的叶子结点集中在树的左部
 3.倒数第二层若存在叶子结点，一定在右部连续位置
 4.如果结点度为1，则该结点只有左子树，没有右子树
 5.同样结点数目的二叉树，完全二叉树深度最小
 满二叉树一定是完全二叉树,但反过来不一定成立
 
 
 二叉树的存储结构：
 顺序存储
 顺序存储一般适用于完全二叉树，其他二叉树存储会浪费存储空间
 二叉链表
 
 
 二叉树遍历
 二叉树的遍历是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点
 被访问一次，且仅被访问一次。
 前序遍历，中序遍历，后序遍历
 前序遍历：A BDHIEJ CFG  中  左  右
 中序遍历：HDIBJE A FCG  左  中  右
 后序遍历：HIDJEB FGC A  左  右 中
 层次遍历：ABCDEFJHIG
 
 
 前序和中序：可以
 中序和后序：可以
 
 前序和中序：不行
 
 前序遍历：A BC DEF
 中序遍历：CB A EDF
 后序遍历：
 
 */

@end

NS_ASSUME_NONNULL_END
