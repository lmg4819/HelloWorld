//
//  JSMemory.m
//  HelloWordl
//
//  Created by lmg on 2019/4/30.
//  Copyright © 2019 lmg. All rights reserved.
//

#import "JSMemory.h"

@implementation JSMemory
/*
 OC可执行程序是由可执行代码，初始化和未初始化的程序数据，链接信息，重定位信息，局部数据和动态数据构成的。程序数据包括以静态方式声明的变量和程序常量。
 可执行代码，程序数据，链接信息，重定位信息会以静态方式被分配内存，并在程序的生命周期中一定存在。
 局部数据在语句块中声明并且仅在该语句块中有效，当该语句块执行后局部数据不会继续存在。
 局部数据被存储在程序栈中，程序栈通常是在执行程序前就被设定尺寸的内存段，栈用于存储局部变量和调用方法的上下文数据。这些上下文数据包括方法的输入参数，返回值，以及调用完方法后执行程序的代码地址。操作系统会自动管理这些内存；这些数据会获取到栈中的内存，而分配给这些数据的内存会在它们失效后被释放。
 在运行时，OC会将创建的对象（通过NSObject类的alloc方法）存储在动态分配的内存即堆内存中。以动态方式创建就意味着需要进行内存管理，因为在堆内存中创建的对象永远不会超出其作用范围。
 
 执行程序时，内存的分配和执行情况
 
 1.输入程序的数据
 2.栈
 3.未使用的内存
 4.堆
 5.程序数据
 6.可执行的二进制代码
 
 内存管理错误容易导致的两个问题：内存泄漏和指针悬挂
 
 
 ARC使用的引用计数模式和MRR使用的相同，但由编译器管理回收对象的工作。具体来说，在编译程序时，编译器会分析源代码，确定以动态方式创建的对象的回收需求，然后在以编译代码的必要位置自动插入retain和release消息。ARC还可以潜在的提升应用的性能和消除内存管理错误。ARC无法自动处理循环引用。
 
 
 

 */
@end
