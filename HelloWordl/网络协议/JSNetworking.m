//
//  JSNetworking.m
//  HelloWordl
//
//  Created by lmg on 2019/4/30.
//  Copyright © 2019 lmg. All rights reserved.
//

#import "JSNetworking.h"

@implementation JSNetworking
-(instancetype)init
{
    self = [super init];
    if (self) {
        
    }
    return self;
}
#pragma mark -HTTP协议
/*
 HTTP协议主要特点：
 1.简单快速，由于HTTP协议简单，使得HTTP服务的规模小，因而通信速度很快
 2.灵活，HTTP协议允许传输任何类型的数据对象，传输的类型由Content-Type加以标记
 3.无连接，无连接的意思是限制每次连接只处理一个请求，采用这种方式可以节省传输时间。服务器处理完客户的请求，并接收到客户的应答时，即断开连接
 4.无状态，无状态是指对事物处理没有记忆能力。缺点是如果后序处理需要前面的信息，那就必须重传，可能导致每次连接传送的数据量增大；优点是在服务器不需要先前信息时它的应答就较快。
 
 HTTP协议默认端口是80，HTTPS默认端口是443
 
 HTTP请求之Request：
 请求行    请求方法  空格  URL  空格 协议版本 回车符  换行符
 请求头    头部字段名 ： 值  回车符  换行符
          头部字段名 ： 值  回车符  换行符
 空行      回车符  换行符
 请求数据   请求数据
 
 HTTP请求之Response：
 状态行     HTTP协议版本号 状态码 状态消息
 消息报头   客户端要使用的一些附加信息
 空行      报头后面的空行是必须的
 响应正文   服务器返回给客户端的正文信息
 
 
 错误码：
 1xx：指示信息--表示请求已接受，继续处理
 2xx：成功
 3xx：重定向--表示要完成请求必须进行更进一步的操作
 4xx：客户端错误--请求有语法错误或请求无法实现
 5xx：服务器端错误--服务器未能实现合法的请求
 
 
 GET和POST请求的区别：
 1.Get请求的参数会在URL中拼接起来，POST请求的参数在请求体中（body），不会在地址栏显示
 2.Get请求提交时，传输数据会受到URL长度的限制，IE的限制是2K+35字节，POST理论上不受限制，HTTP协议没有对数据传输大小进行限制，浏览器对数据大小有限制
 3.POST的安全性要比GET的安全性高

 
 
 应用层协议：
 超文本传输协议（HTTP协议）
 简单文件传输协议（FTP）
 远程登录（Telnet），提供远程访问其他主机功能，它允许用户登录Internet主机，并在这台主机上执行命令
 简单网络管理协议（SNMP）
 域名系统（DNS）该系统用于在internet中将域名及其公共广播的网络节点转换成IP地址
 
 网络层协议：
 Internet协议（IP）
 Internet控制信息协议（ICMP）
 地址解析协议（ARP）
 反向地址解析协议（RARP）
 
 
 TCP与UDP区别：
 1.TCP是面相连接的，UDP是面相无连接的
 2.TCP是面相字节流的，UDP是基于数据报文的
 3.TCP保证数据正确性，UDP可能丢包
 4.TCP保证数据顺序，UDP不保证
 5.TCP对系统资源要求比较多，UDP对系统资源要求比较少
 6.UDP具有较好的实时性
 
 
 UDP的包头：
 源端口号和目标端口号
 
 
 UDP的使用场景：
 直播，很多直播应用都基于UDP实现了自己的视频传输协议
 实时游戏，
 物联网
 
 TCP的包头：
 1.源端口号和目标端口号
 2.包的序号，主要是为了解决乱序问题
 3.确认序号，发出去的包应该有确认，这样能知道对方是否收到，如果没收到就应重新发送，这个解决的是不丢包的问题
 4.状态位，SYN是发起一个连接，ACK是回复，RST是重新连接，FIN是结束连接。因为TCP是面向连接的，因此需要双方维护
 维护连接的状态，这些状态位的包可能会引起双方的状态变更。
 5.窗口大小，TCP要做流量控制，需要通信双方各声明一个窗口，表示自己当前的处理能力。
 
 TCP的三次握手除了建立连接外，主要还是为了沟通TCP包的序号问题
 
 TCP的三次握手：
 1.刚开始，客户端和服务器都处于CLOSED状态，显示服务器主动监听某个端口，处于LISTEN状态
 2.然后客户端主动发起连接SYN（seq=x），之后处于SYN_SENT状态
 3.服务器接受了发起的连接，返回SYN(seq=y)，并且ACK（确认ack=x+1）客户端的SYN，之后处于SYN_SENT状态
 4.客户端接收到服务器的SYN和ACK之后，发送SYN的ACK(seq=x+1,ack=y+1)，之后就处于ESTABLISHED状态
 5.服务器收到客户端的ACK之后，也处于ESTABLISHED状态
 
 
 TCP的四次挥手：
 1.刚开始，客户端和服务器都处于ESTABLISHED状态，A端发送FIN，A处于FIN_WAIT_1状态
 2.B端发送ACK，处于CLOSE_WAIT的状态，A端接受到ACK以后，处于FIN_WAIT_2FIN_WAIT_2状态
 3.如果B端直接跑路，A端将一直处于这个状态，TCP协议里面没有对这个状态的处理，但Linux有，可以设置超时时间
 4.A接受到B端的FIN，从FIN_WAIT_2状态结束，处于TIME_WAIT状态,如果B端没收到A端的FIN就会重发
 
 
 TCP为什么是可靠连接：
 1.通过TCP连接传输的数据无差错，不丢失，不重复且按顺序到达
 2.TCP报文头里面的序号能使TCP的数据按序到达
 3.报文头里面的确认序号能保证不丢包，累计确认及超时重传机制
 4.TCP拥有流量控制及堵塞控制的机制
 
 
 
 */


@end
