
//
//  面试题总结.h
//  Example0
//
//  Created by 罗孟歌 on 2019/4/17.
//  Copyright © 2019 lmg. All rights reserved.
//

#ifndef ______h
#define ______h
/*
1.设计模式是什么，你知道哪些设计模式，并简要概述
设计模式是一种编程经验，就是用比较成熟的逻辑去处理某一种类型的事情
iOS中常用的设计模式：
1.单例模式：通知中心，文件管理器，NSUserDefault
2.观察者模式，KVO，通知
3.中介者模式，URLRooter
4.工厂模式，UIButton
5.组合模式，协议
6.委托模式，代理
7.MVC模式
8.MVVM模式：
9.策略模式，将算法封装起来，使彼此之间可以互相替换，使算法本身和使用算法的用户分割开来，互相独立


2.MVC与MVVM的区别
MVC是Model-View——Controller
Model：数据模型
View：视图展示
Model通过KVO和NSNotification和Controller进行通信
View通过Target-Action和Delegate和Controller进行通信
Model和View不直接通信
Controller：View和Model的中介，当View被用户操作的时候修改Model，当Model变化的时候刷新View，但是实际使用过程中，许多人会把业务逻辑和视图展示逻辑放到Controller，导致了Massive Controller



MVVM是为了解决Massive Controller的问题，给C减负，从C中抽出ViewModel，并将剩下的C合进V，形成新的Model---View----ViewModel


3.#import和#include的区别
#import是OC导入头文件的关键字，#include是C/C++语言的关键字
#import可以防止重复导入头文件
@class是向前声明，告诉编译器某个类的声明，只有到了执行时，才会去查看类的实现文件，
可以解决头文件的重复包含
#import<>用来导入系统头文件，#import“”用来导入用户头文件，也可以导入系统头文件

4.frame和bounds的区别


5.Objective-C的类可以多重继承么？可以实现多个接口么？Category是什么？重写一个类的方法用继承好还是分类好？为什么？
不可以，使用协议，分类，分类好，使用分类去重写类的方法，只对category有效，不会影响本类和其他类的关系


6、@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的
ivar+set+get  编译器在编译器生成实例变量和访问方法


7.@property中有哪些属性关键字？/ @property 后面可以有哪些修饰符？
原子性 nonatomin/atomic
读写 readonly/readwrite
内存管理 copy/weak/strong/assign/unsafe_unretained
读写方法 set/get
空/非空  nonnull,nullable

8.属性关键字 readwrite，readonly，assign，retain，copy，nonatomic 各是什么作用，在那种情况下用？
readwrite 可读可写，会生成set和get方法
readonly 只读，不会生成set方法，只有get方法
assign  赋值，可以修饰基本数据类型，也可以修饰对象
weak    赋值操作，非持有关系，对象销毁以后，指针会自动置为nil，只能修饰对象
strong  持有关系，强引用
copy    复制
nonatomic 非原子性，atomic只能保证指针的安全，无法保证指向对象的线程安全,并且由于加锁开销较大，所以一般不使用atomic

9.什么情况使用 weak 关键字，相比 assign 有什么不同？
weak是用来解决循环引用的，两个都可以用来修饰OC对象，表示赋值，非持有关系，assign可以用来修饰普通数据类型
weak指针指向的对象销毁时，会自动置为nil

10.怎么用 copy 关键字？
NSString，NSArray，NSDictionary等常用copy关键字，因为他们有对应的可变类型
block也常用copy修饰


11.用@property声明的 NSString / NSArray / NSDictionary 经常使用 copy 关键字，为什么？如果改用strong关键字，可能造成什么问题？
使用copy是为了防止把可变对象赋值为不可变对象，可变类型的值发生改变无意间会篡改不可变对象的值

12.浅拷贝和深拷贝的区别？
深拷贝拷贝对象，浅拷贝拷贝指针


13.系统对象的 copy 与 mutableCopy 方法
copy生成的是不可变对象，mutableCopy生成的是可变对象
可变+copy 深拷贝 不可变
不可变+copy 浅拷贝 不可变
可变+copy 深拷贝 不可变


14.这个写法会出什么问题：@property (nonatomic, copy) NSMutableArray *arr;
copy生成的是不可变对象，应该用strong修饰，然后进行mutableCopy

15.如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？
实现NSCopying协议 copyWithZone方法

16.@synthesize 和 @dynamic 分别有什么作用？
@synthesize，自动合成属性访问方法，
@dynamic禁止自动合成，由用户手动实现，编译器不报错，运行时如果找不到访问方法，就会崩溃

17.常见的 Objective-C 的数据类型有那些，和C的基本数据类型有什么区别？如：NSInteger和int
NSInteger是int或者long的别名，会根据系统是32位还是64位来决定本身是int还是long

18.id 声明的对象有什么特性？
id声明的对象具有运行时的特性，即可以指向任何类型的OC对象

19.Objective-C 如何对内存管理的，说说你的看法和解决方法
1.MRR
2.ARC
3.AutoReleasePool


20.Objective-C 中创建线程的方法是什么？如果在主线程中执行代码，方法是什么？如果想延时执行代码、方法又是什么？


21.Category（类别）、 Extension（扩展）和继承的区别
1.分类有名字，扩展没有名字，扩展是匿名的分类
2.分类只能声明方法。类扩展可以增发方法，属性和成员变量
3.继承可以增加删除修改方法，并且可以增加属性

22.我们说的OC是动态运行时语言是什么意思？
主要讲数据类型的确定由编译时推迟到了运行时，知道运行时才去决定一个对象的类别，
以及调用该类别的方法

23.为什么我们常见的delegate属性都用是week而不是retain/strong？
避免循环引用

24.什么时候用delegate，什么时候用Notification？
delegate是一对一，Notification是一对多，View和其他部分交互一般用delegate，Model和其他部分交互一般用NSNotification，NSNotification可以跨多个层级传递数据

25.什么是 KVO 和 KVC？
KVO是键值观察，能够使对象在其他对象的属性发生更改时获得通知。
KVC是键值编码，通过字符串间接访问对象属性的方式

26.KVC的底层实现？
1.当一个对象调用setValue方法时，检查是否存在对应的key的setValue方法，如果存在就去实现
2.如果set方法不存在，就去查找与key同名并且带有下划线的成员变量，如果有，则直接给成员变量赋值
3.如果不存在，则去找与key同名或者isKey等相关的属性，如果有就直接赋值
4.如果还没有找到，则调用valueForUnDefinedKey方法抛出异常

27.KVO的底层实现？
如果一个对象注册为被观察对象，在运行时会动态生成一个派生类，类名为NSKeyValueObserver_A，并重写该类被观察属性的set方法
- （void）setName:(NSString *)name
{
[self willChangeValueForKey:];
[super setName:name];
[self didChangeValueForKey:];
}
触发回调observeValueForKeyPath

28.ViewController生命周期
1.loadView
2.ViewDidLoad
3.ViewWillAppear
4.ViewWillLayoutSubViews
5.ViewDidLayoutSubViews
6.ViewDidAppear
7.ViewWillDisappear
8.ViewDidDisappear
9.dealloc

29.UIApplication的声明周期
状态：
1.Not Running
2.inactive
3.active
4.backGround
5.suspend
UIApplication代理：
1.didFinishLaunchingWithOptions
2.DidBecomeActive  获取焦点
3.DidEnterBackground  已经进入后台
4.WillResignActive  即将失去焦点
5.WillEnterForeground 即将进入前台
6.DidReceiveMemoryWarning   内存警告
7.WillTerminate   即将推出


30.方法和选择器有何不同？
选择器是方法的名字，方法包含了参数，方法名和返回值还有实现

31.你是否接触过OC中的反射机制？简单聊一下概念和使用
NSStringFromClass NSClassFromString
NSStringFromSelector  NSSelectorFromString

32.调用方法有两种方式：
[obj func]
[obj performSelector]
objc_msgSend

33.如何对iOS设备进行性能测试？
instrument----Time Profile


34.开发项目时你是怎么检查内存泄露？
1.Analyse
2.Time-Profile
3.MLeaksFinder

35.什么是懒加载？
只有在用到的时候才初始化，也可以理解成延时加载

36.类变量的 @public，@protected，@private，@package 声明各有什么含义？
@public:
将实例变量设置为可以被任何对象访问。
@private:
将实例变量设置为只能在声明它的类以及与该类类型相同的其他实例中访问。
@package:
将实例变量设置为可以被其他类实例和函数访问，但是在其所属程序包的外部，它会被视为私有变量。这种作用范围可以用于库或框架类。
@protected:
这是实例变量默认的作用范围，将实例变量设置为只能在声明它的类以及子类的实例方法中能访问。

37.什么是谓词？
谓词就是通过NSPredicate给定的逻辑条件作为约束条件，完成对数据的筛选

38.isa指针问题
指向对象的Class的指针


39.如何访问并修改一个类的私有属性？
1.KVC
2.通过RunTime访问并修改类的私有属性

40.一个objc对象的isa的指针指向什么？有什么作用？
指向他的类对象，从而找到对象上的方法

41.isKindOfClass、isMemberOfClass、selector作用分别是什么
isKindOfClass，判断该对象是否为某类的实例或者继承自某类
isMemberOfClass，某个对象是否属于某个类的实例


42.什么是block？
闭包，包含局部变量的匿名函数

43.BAD_ACCESS在什么情况下出现？
1.原因是访问了野指针，
2.比如访问已经释放对象的成员变量，或者发消息，
3.死循环等。

44.lldb（gdb）常用的控制台调试命令
po

45.你一般是怎么用Instruments的？
Time-Profile 性能分析
Leaks 内存泄露
Allocations 用来检查内存分配
Zombies 检查僵尸对象

46.iOS中常用的数据存储方式有哪些？
plist  NSUserDefault
数据库  Sqlite,CoreData
文件   NSKeyedArchive
钥匙链  KeyChain


47.iOS的沙盒目录结构是怎样的？
1.Document  存储用户数据，数据库
2.Library  Caches:存储文件 Preferences:系统的偏好设置
3.Temp   临时文件


48.iOS多线程技术有哪几种方式？
pthread  NSThread  NSOperationQueue  GCD

49.GCD 与 NSOperationQueue 的区别：
1.GCD是C语言的API，NSOperationQueue是OC对象
2.GCD更底层，使用更方便，效率更高
3.NSOperationQueue功能更多，是GCD面相对象的封装
4.NSOperationQueue支持KVO，可以取消，可以暂停，可以设置优先级，设置依赖关系
5.NSOperation可以创建子类，子定义功能扩展

50.如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）
dispatch_group和dispatch_group_notify


51.dispatch_barrier_async（栅栏函数）的作用是什么？
在并行队列中，为了保证某些任务的正常运行，需要等到一些任务完成后才能继续进行下去，使用
dispatch_barrier_async来等待之前任务完成，避免数据竞争等问题。

52.什么是 RunLoop

53.说说你对 runtime 的理解

54.Runtime实现的机制是什么，怎么用，一般用于干嘛？
1.Method Swizzling
2.实现给分类增加属性
3.实现字典和模型的自动转换
4.JSPatch动态创建类，新增方法，成员变量，协议，消息转发等
5.实现NSCoding的自动归档和自动解档
6.KVO的实现

55. RunLoop在开发中的使用
1.NSTimer在滑动时停止的问题
2.ImageView延迟加载
3.后台常驻线程

56.什么是 Method Swizzle（黑魔法），什么情况下会使用？

57._objc_msgForward 函数是做什么的，直接调用它将会发生什么？
objc_msgForward是做消息转发的，当向一个对象发送消息，这个对象并没有实现的时候，_objc_msgForward会
尝试做消息转发，一旦调用了这个函数，会跳过消息传递的过程，直接走消息转发，即使实现了方法也不行
什么时候会使用objc_msgForward方法
1.你想获取某方法对应的方法签名时
2.JSPatch 就是直接调用_objc_msgForward来实现其核心功能的
3.同时 RAC(ReactiveCocoa) 源码中也用到了该方法


57.什么是 TCP / UDP ?
TCP  是         不可靠      传输大量的数据，对可靠性要求高的场合    慢
UDP  否         可靠        传输少量的数据，对可靠性要求不高的场景  块


58.通信底层原理（OSI七层模型）
物理层，数据链路层，网络层，传输层，会话层，表示层，应用层

59.介绍一下XMPP？

60.tableViewCell的重用机制？
UITableView通过重用机制来节省内存，为每一个单元格指定一个重用标识符，即指定了单元格的种类，当单元格滑出屏幕时，
系统会把这个单元格添加到重用对列中，等待被重用，当有新单元格从屏幕外划入屏幕时，从重用对列中找看有没有可重用的单元格
，如果有，就拿出来用，如果没有就创建一个来使用

61.在手势对象基础类UIGestureRecognizer的常用子类手势类型中哪两个手势发生后，响应只会执行一次？
tap和swipe

62.如何高性能的给 UIImageView 加个圆角
使用绘图技术

63.HTTP协议中 POST 方法和 GET 方法有那些区别?
1.get是用于向服务器请求数据，post用于提交数据
2.get请求，请求参数拼接在形式暴露在地址栏，而POST请求参数则放在请求体里面，
因此get请求不适合传重要数据
3.get请求的URL有长度限制，POST无长度限制

64.请简单的介绍下APNS发送系统消息的机制
1.应用在通知中心注册，由iOS系统向APNS服务器请求返回设备令牌（Device Token）
2.应用程序接收到设备令牌并发送给自己的后台服务器
3.后台服务器将要推送的内容和设备令牌发送给APNS服务器
4.APNS根据设备令牌找到设备，在由iOS系统根据APPID把推送消息展示

66. ios开发逆向传值的几种方法整理
1.代理
2.block
3.通知
4.单利
5.KVO


67.浅谈iOS开发中方法延迟执行的几种方式
1.performSelector
2.NSTimer
3.GCD
4.NSThread线程的sleep

68.您是否做过一部的网络处理和通讯方面的工作？如果有，能具体介绍一下实现策略么?
1.使用NSOperation发送一部网络请求，NSOperationQueue管理线程数目和优先级，底层用NSUrlSession



69.你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？
#import<objc/runtime.h>
#import<objc/messahe.h>

70.Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？
分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）
UI框架的底层有CoreAnimation，CoreAnimation的底层有CoreGraphics。

71.是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。
CoreText可以解决复杂文字内容排版问题。CoreImage可以处理图片，为其添加各种效果

72.自动释放池是什么,如何工作
当你想一个对象发送autorelease消息，这个对象会被放入到当前的AutoreleasePool，它仍然是个OC对象，因此自动释放池作用域内的对象仍然可以向它发送消息，当程序执行到作用域结束的位置，自动释放池会被释放，池中的所有对象都会被发送一次releasse消息


73.你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，
实现了什么？请描述它和G.C.D的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。


74。对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？

75。你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。
1.抽象和封装，方便使用，
2，提供尽可能少的接口，提供详尽的开发文档和使用说明
3，把外放的属性设置为只读模式，提供方法对需要修改的属性进行操作
4，对于可能被异步调用的方法要加锁

76.AFNetworking 底层原理分析

77.描述下SDWebImage里面给UIImageView加载图片的逻辑

78.不用中间变量,用两种方法交换A和B的值
1。加法 a b
a = a + b
b = a - b
a = a - b
2.异或运算 a b
a = a ^ b
b = a ^ b
a = a ^ b

0010 ^ 1010 = 1000(a)
1000 ^ 1010 = 0010(b)
1000 ^ 0010 = 1010(a)

79.求最大公约数
int a = 100,b = 15;
int temp = 0;
while (a % b > 0) {
temp = a % b;
a = b ;
b = temp;
}
NSLog(@"%d",b);


80.模拟栈操作

81.排序算法
冒泡排序：将已排序部分定义在右边，在遍历未排序部分的过程执行交换，将最大元素移到右边
选择排序：将已排序部分定义在左边，然后选择未排序部分的最小元素和未排序部分的第一个元素执行交换
插入排序：将已排序部分定义在左边，将未排序部分的第一个元素插入到已排序部分合适的位置。
快速排序：
堆排序：


82.折半查找


83.在项目什么时候选择使用GCD，什么时候选择NSOperation?
1.GCD更直观，使用方便，NSOperationQueue使用起来比较复杂
2.GCD是C语言的API，NSOpearationQueue是OC对象
3.NSOperationQueue可以使用KVO进行观察
4.NSOperationQueue可以取消，添加任务依赖，设置最大并行数
5.GCD提供了dispatch_once和dispatch_after
7.NSOperation可以继承，进行扩展


84.KVO，NSNotification，delegate及block区别

85.NSTimer创建后，会在哪个线程运行
用scheduledTimerWithTimeInterval创建的，在哪个线程创建就会被加入哪个线程的RunLoop中就运行在哪个线程
自己创建的Timer，加入到哪个线程的RunLoop中就运行在哪个线程。

86.id和NSObject＊的区别
id是一个objc_object指针，定义是
typedef struct objc_object *id,id可以理解为对象的指针，可以指向任何类型的OC对象
NSObject *只能指向继承自NSObject的对象，而基类还有NSProxy，所以NSObject *是id的子集


87.static关键字的作用
static修饰局部变量，改变变量的作用域为全局，当程序退出时，才会被销毁
static修饰全局变量，修改全局变量的作用域，生命周期不会改，修改了使用范围
https://blog.csdn.net/wujakf/article/details/80229148

88.@protocol和category中如何使用@property
·在@protocol中声明属性，只会生成对应的set，get方法，我们的目的是为了让遵从这个协议的对象能实现该属性
·在category中声明属性，也是只会生成对应的set，get方法，如果我们真的需要给category增加属性的实现，我们可以使用Runtime的两个函数来实现

89.runtime如何实现weak属性
weak此特质表明了一种非拥有关系
Runtime维护了一个weak表，用于存储指向某个对象的所有weak指针，weak变其实是一个hash表
key是所指对象的地址，value是weak指针的地址数组，当对象的引用计数为0时，根据对象的地址，寻找到weak指针的数组，
遍历数组，将其中的数据置为nil，然后把这个对象从weak表中删除，然后清理对象的记录

90.weak属性需要在dealloc中置为nil吗
不需要，在属性所指向的对象被销毁时，属性值也会被置为nil


91.ARC下，不显式的指定属性关键字时，默认的属性有哪些
strong，atomic，assign,readwrite

92.@synthesize合成实例变量的规则是什么，加入property名为foo，已经存在了_foo的实例变量，还会自动合成新变量吗
默认为属性值加下划线，如果指定了新的则用指定的名字作为属性的实例变量，不会再合成了


93.在有了自动合成属性实例变量以后，@synthesize还有哪些使用场景
1.在protocol中声明的属性
2.在category中声明的属性
3.用@dynamic
4.同时重写了set和get方法
5，重写了只读属性的get方法时
这些情况下都需要你使用@synthesize手动合成ivar，另外还可以改变属性实例变量名

94.objc中向一个nil对象发送消息会发生什么
nil对象的isa指针会返回0，不会产生任何错误

95.objc中向一个对象发送消息[obj foo]和objc_msgsend()函数之间有什么关系
该方法编译时候就是objc_msgsend()函数调用


96.什么时候会报unrecognizer selector错误
走完消息传递的流程和消息转发的流程都找不到对应的方法时就会报这个错误

97.消息传递的流程
1.根据对象的isa指针找到对象所属的类，在类的方法缓存中寻找SEL，如果找到就去实现，找不到走下一步
2.在类的方法列表中找，找到了就去实现，并把方法加入到该类的方法缓存中去，找不到走下一步
3.在类的父类方法列表中找，一直到NSObject类为止，如果能找到就去实现，找不到就走消息转发的流程

98.消息转发的流程
1.动态方法加载objc运行时会调用resolveInstanceMethod或者resolveClassMethod让你动态添加方法
2.forwardingTargetForSelector返回备援接受者
3.走完整的消息转发流程，首先会调用methodSignatureForSelector获取方法的参数和返回值类型，如果该方法返回nil，
那么程序会调用doesNotRecognizeSelector,如果返回了NSMethodSignature，runtime就会创建一个函数签名并调用forwardInvocation，
如果forwardInvocation返回nil，这是也会调用doesNotRecognizeSelector


99.runtime如何通过selector找到对应的IMP实现
每一个类对象都有一个对象方法列表（对象方法缓存），类方法列表是存放在类对象中isa指针
指向的元类对象中，方法列表中每个方法结构体中记录着方法的名称，方法实现，以及参数类型，
其实selector本质就是方法名称，通过方法名称就可以在方法列表中找到对应的方法实现。
当我们发送一个消息给一个NSObject对象时，这条消息会在对象的类对象方法列表里查找，当我们发送一个消息给一个类时，这条消息会在类的元类对象的方法列表中去查找。


100.使用runtime associate关联的对象，需要在主对象dealloc的时候释放吗
不需要

101.能都向编译后得到的类中增加实例变量，能否向运行时动态添加的类中增加实例变量，为什么
不能，能
原因，编译后的类注册在Runtime中，类的实例变量链表和实例变量的内存大小都是确定的
运行时创建的类可以通过class_addIvar增加实例变量，但是必须要在objc_allocateClassPair和objc_registerClassPair之间


102.RunLoop和线程之间有什么关系
1.RunLoop和线程是一一对应的，RunLoop是线程的基础架构部分，有一个全局字典存储了RunLoop，以线程为key，而
value为对应的RunLoop
2.主线程的RunLoop默认是启动的
3.子线程的RunLoop默认是不启动的，当你获取的时候会自动创建，并存储字典，当线程被销毁的时候，RunLoop也会被销毁
4.CFRunLoopGetCurrent来获取当前线程的Runloop，CFRunLoopGetMain来获取主线程的RunLoop


103.RunLoop的mode作用是什么
mode主要是用来指定事件在运行循环中的优先级，分为
NSDefaultRunLoopMode：默认优先级
UITrackingRunLoopMode，ScrollView滑动时
UIInitializationRunLoopMode，应用启动时
NSRunLoopCommonModes：前两个的集合，是一种标记
苹果公开提供的mode有两个：NSDefaultRunLoopMode，NSRunLoopCommonModes


104.以scheduledTimerWithTimeInterval的方式触发的NSTimer在滑动页面的列表时，Timer会暂停回调，为什么
RunLoop只能运行在一种mode下，scheduledTimerWithTimeInterval创建的Timer默认会添加在NSDefaultRunLoopMode
中，当UIScrollView滑动时，当前mode被切换成UITrackingRunLoopMode，此时RunLoop会停下重新启动，无法再执行NSTimer，
可以将NSTimer添加到NSRunLoopCommonModes解决这个问题


105.猜想RunLoop内部是如何实现的
function (){
do{
var message = get_next_message
process_message(messgae)
}while(message != quit)
}


106.不手动指定autoreleasePool的情况下，一个autoreleasePool什么时候释放
1.所有的autorelease的对象，在出了作用域后，会被添加到最近创建的自动释放池中，并会在当前的RunLoop迭代结束时释放
2.从程序开始加载到加载完成是一个完整的事件循环，然后会停下来，等待用户交互，用户的每一次交互都会启动一次运行循环，来处理
用户所有的点击事件和触摸事件
3.viewDidLoad和viewWillAppear属于同一循环，ViewdidAppear时已经被释放了


107.使用block什么时候会发生循环引用，如何结束？
一个对象强引用了block,block又强引用了这个对象，就会发生循环引用，使用__block或者__weak来修饰对象

108.使用系统的某些blockAPI时，是否需要考虑循环引用
一般不需要


109.如何用GCD同步若干个异步调用？
dispatch_group_t

110.苹果为什么要废弃dispatch_get_current_queue()函数
dispatch_get_current_queuet容易造成死锁

111.以下代码执行结果如何
{
[super viewDidLoad];
NSLog(@"1");
dispatch_sync(dispatch_get_main_queue(), ^{
NSLog(@"2");
});
NSLog(@"3");
}
发生主线程锁死

112.TableView的优化
1.正确的复用cell
2.设计统一规格的cell
3.提前计算并缓存好高度，因为heightForRowAtIndexPath是调用最频繁的方法
4.遇到复杂界面时异步绘制
5.减少子视图的层级关系
6.尽量时所有的视图不透明化以及做切圆操作
7.不要动态的add和remove，最好在初始化时加add，然后通过hidden来控制显示隐藏
8.滑动时按需加载，这个在大量图片展示，网络加载的时候很管用
9.使用调试工具分析问题

113.TCP的三次握手和四次挥手
三次握手：
1.客户端发送SYN（SEQ=x）报文给服务器，此时客户端处于SYN_SEND状态
2.服务器收到SYN报文，回复一个SYN(SEQ=y)+ACK(ACK=x+1)报文，进入SYN_RECV状态
3.客户端收到服务器的SYN报文，回应一个ACK(ACK=y+1)报文，此时双方进入Established状态

四次挥手：
1.某个应用程序首次调用close，称该端将主动关闭，该段的TCP发送一个FIN分节，表示自己数据发送完毕
2.接受到FIN的对端执行“被动关闭”，它的TCP发送ACK
3.一段时间后，接受到这个文件结束符的应用程序将调用close关闭它的socket，这导致它的TCP也发送一个FIN
4.接受这个最终FIN的原发送端TCP确认这个FIN，发送ACK

114.iOS中的所有架构
模拟器：
i386     4s-5
x86_64   5s---最新
真机：
armv7    3gs--4S
armv7s   5/5c
arm64    5s---最新


115.是否可以把比较耗时的操作发到NSNotificationCenter中
首先必须明确通知在哪个线程中发出，那么处理接收到通知的方法也在这个线程中调用
如果在异步线程发的通知，那么可以执行比较耗时的操作
如果在主线程发的通知，那么就不可以执行比较耗时的操作。

116.SDWebImage的加载逻辑：
1根据URL查看是否内存中是否有图片缓存，如果有的话就回调block将图片返回
2如果内存中没有，就去异步查找磁盘中是否有图片，如果从磁盘中读取到图片，将图片添加到内存缓存中，回调block将图片返回
3内存和磁盘中都没有图片缓存，创建网络请求下载图片
4图片下载完成后，数据完成后先做图片解码操作，将图片添加到内存缓存和磁盘缓存，回调block将图片返回，图片数据写入磁盘缓存中是异步操作


117.UIView与CALayer的关系
UIView继承于UIResponder,(UIResponder继承于NSObject)
CALayer继承于NSObject
区别在于UIResponder这一层，UIView可以响应事件，而Layer不可以
UIView对于绘图和动画都是layer完成的，UIView只是呈现Layer和处理交互响应事件

118.APNS推送流程
1.The app register for push notifications,The OS asks APNS for a device token
2.The app receives the device token
3.The app send the token to your server
4.When something interesting happens,your server sends a push notification to the APNS erver
5.APNS server sends the push notification to your app.

119.load加载和initialize方法的区别：
1.load方法会在initialize方法的调用操作之前，类被加载之后立即被调用。实际上，对于以静态方式链接的类（可执行程序的组成部分），调用load方法的操作在调用main（）函数的操作之前。如果load方法是在可选包中的类实现的，那么当该包以动态方式被加载时load方法就会执行。当该方法被调用时，程序的自动释放池通常还不存在，其他类可能还没有加载。
2.load方法可以由类实现也可以由分类实现。事实上，一个类中的所有分类都可以实现其本身的load方法，initialize方法永远不能在分类实现。
3.load方法在实现的前提下，一定会被调用且仅调用一次。initializet如果类没有被使用，那么该方法就不会被调用。
*/

#endif /* ______h */
