//
//  CYPAuthenticationView.h
//  PushProject
//
//  Created by lmg on 2019/5/31.
//  Copyright © 2019 lmg. All rights reserved.
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@interface CYPAuthenticationView : UIView
/*
 设计模式是对定制来解决特定场景下一般设计问题的类和相互通信的对象的描述
 
 
 MVC  模式----视图----控制器
 
 1.在模型对象中封装数据和基本行为
 
 
 2.使用视图对象向用户展示信息
 
 
 3.用控制器对象联系起模型和视图
 
 
 MVC本身并不是最基本的设计模式，它包含了若干更基本的设计模式。Cocoa的MVC用到的模式有：组合，命令，中介者，策略和观察者
 
 组合：视图对象之间以协作的方式构成一个视图层次体系，其中既可以有复合视图，也可以有独立视图。每个层次的每个视图节点都可以响应用户的
 操作并把自己绘制到屏幕上。
 
 命令：这是一种Action-Target机制，视图对象可以延迟其他对象的执行，让其他对象等到发生了某些事件后再执行。这一机制构成了命令模式
 
 中介者：控制器对象起着中间人的作用，而这个中间人则采取了中介者模式，它构成了在模型和视图对象之间传递数据的双向通道。应用程序的控制器对象将模型的变更传达给视图对象。
 
 策略：控制器可以是视图的一个”策略“，视图对象将自身隔离，以期维护其作为数据展示器的唯一职责，而将一切应用程序特有的界面行为的决定委托给
 它的“策略”对象（即控制器）。
 
 观察者：模型对象向它所关注的控制器等对象发出内部状态变化的通知。
 
 
 针对接口编程，而不是针对实现编程
 协议和抽象基类
 
 
 继承的优点：
 1.类继承简单直接，因为关系在编译时静态定义
 2.被复用的实现易于修改
 缺点：
 1.因为类继承在编译时定义，所以无法在运行时变更从父类继承来的实现
 2.子类的部分描述常常定义在父类中
 3.子类直接面对父类实现的细节，因此破坏了封装
 4.父类实现的任何变更都会强制子类也进行变更，因为他们的实现联系在了一起
 5.因为在新的问题场景下继承来的实现已过世或不适用，所以必须重写父类或继承来的实现
 
 组合的优点：
 1.不会破坏封装，因为只通过接口来访问对象
 2.大大减少实现的依存关系，因为对象的实现是通过接口来定义的
 3.可以在运行时将任意对象替换为其他同类型的对象
 4.有助于保持类的封装以专注于单一任务
 5.类及其层次结构能够保持简洁，不至于过渡膨胀而无法管理
 缺点：
 1.设计中涉及较多对象
 2.系统的行为将依赖于不同对象间的行为，而不是定义与单个类中
 3.理想状态下，不需要创建新的组件就能实现复用，十分罕见的情况是，通过对象组合的方式，仅仅对已有的组件进行组合就能得到所需的全部功能；
 实际上，现成的组件总是不太够用
 
 优先使用对象组合而不是类继承
 
 
 
 
 

 */
@end

NS_ASSUME_NONNULL_END
