//
//  CanvasView.h
//  HelloWordl
//
//  Created by lmg on 2019/6/13.
//  Copyright © 2019 lmg. All rights reserved.
//

#import <UIKit/UIKit.h>

NS_ASSUME_NONNULL_BEGIN

@interface CanvasView : UIView

+ (instancetype)canvasViewWithFrame:(CGRect)frame;

@end

NS_ASSUME_NONNULL_END
/*
 面向对象设计原则
 1.面向接口编程而不是对实现编程
 2.优先使用对象组合而不是继承
 
 23中设计模式可以分为三大类：
 创建性模式：
 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式,而不是使用new运算符直接实例化对象。这使得程序在判断
 针对某个给定实例需要创建哪些对象时更加灵活
 1.工厂模式
 2.抽象工厂模式
 3.单例模式
 4.建造者模式
 5.原型模式
 
 
 结构型模式：
 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式
 1.适配器模式
 2.桥接模式
 3.过滤器模式
 4.组合模式
 5.装饰器模式
 6.外观模式
 7.亨元模式
 8.代理模式
 
 行为型模式：
 这些设计模式特别关注对象之间的通信。
 1.责任链模式
 2.命令模式
 3.解释器模式
 4.迭代器模式
 5.中介者模式
 6.备忘录模式
 7.观察者模式
 8.状态模式
 9.空对象模式
 10.策略模式
 11.模板模式
 12.访问者模式
 
 
 J2EE模式
 1.MVC模式
 2.业务代表模式
 3.组合实体模式
 4.数据访问对象模式
 5.前端控制器模式
 6.拦截过滤器模式
 7.服务定位器模式
 8.传输对象模式
 
 
 设计模式的六大原则：
 1.开闭原则
 对扩展开放，对修改关闭。在程序需要进行扩展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，
 易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。
 
 2.里氏代换原则（LSP）
 任何基类可以出现的地方，子类一定可以出现，LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而子类与基类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。
 
 3.依赖倒转原则
 针对接口编程，依赖于抽象而不依赖于具体
 
 4.接口隔离原则
 使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度，强调降低依赖，降低耦合
 
 5.迪米特法则（最少知道原则）
 一个实体应该尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。
 
 
 6.合成复用原则
 尽量使用合成/聚合的方式，而不是使用继承。
 
 
 
 */
