
1.MVC的标准模型：
·Models   数据层，负责数据的处理和获取的数据接口层
·Views    展示层（GUI）所有以UI开头的类基本都属于这层
·Controller  控制器层，Model和View之间的中间层，一般来说，当用户对View有操作时它负责去修改相应Model，
当Model的值发生变化时它负责去更新对应View

保证了M与V的可测试性和复用性，一般由于C都是为特别的应用场景下的M和V做中介者，所以很难重用



2.MVC在iOS中的应用
View和Controller共同构成了iOS中的C层，明显违背了MVC的初衷
Controller(VC)层：
1.生成View，然后组装View
2.响应View的事件和作为View的代理
3.调用Model的数据获取接口，拿到返回数据，处理加工，渲染到View界面
4.处理View的生命周期
5.处理界面之间的跳转


Model层：
1.业务逻辑封装
2.提供数据接口给Controller使用
3.数据持久化存储和读取
4.作为数据模型存储数据

View层：
1.界面元素搭建，动画效果，数据展示
2.接受用户操作并反馈视觉效果

M层不应该是数据模型，放几个属性就完事了，而应该是承载业务逻辑和数据存储获取的职责一层。






